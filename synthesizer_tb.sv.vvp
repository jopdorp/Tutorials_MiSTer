#! /usr/local/bin/vvp
:ivl_version "11.0 (stable)" "(s20150603-1103-g348bc13a)";
:ivl_delay_selection "TYPICAL";
:vpi_time_precision + 0;
:vpi_module "/usr/local/lib/ivl/system.vpi";
:vpi_module "/usr/local/lib/ivl/vhdl_sys.vpi";
:vpi_module "/usr/local/lib/ivl/vhdl_textio.vpi";
:vpi_module "/usr/local/lib/ivl/v2005_math.vpi";
:vpi_module "/usr/local/lib/ivl/va_math.vpi";
:vpi_module "/usr/local/lib/ivl/v2009.vpi";
S_0x564431b0c290 .scope package, "$unit" "$unit" 2 1;
 .timescale 0 0;
S_0x564431b021f0 .scope module, "synthesizer_tb" "synthesizer_tb" 3 1;
 .timescale 0 0;
P_0x564431af80f0 .param/l "clock_speed" 1 3 2, +C4<0000000000000000000000000000000000001101110000000000000000000000>;
v0x564431b40520_0 .array/port v0x564431b40520, 0;
L_0x564431b09630 .functor BUFZ 32, v0x564431b40520_0, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40520_1 .array/port v0x564431b40520, 1;
L_0x564431b07630 .functor BUFZ 32, v0x564431b40520_1, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40520_2 .array/port v0x564431b40520, 2;
L_0x564431b05630 .functor BUFZ 32, v0x564431b40520_2, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40520_3 .array/port v0x564431b40520, 3;
L_0x564431b03630 .functor BUFZ 32, v0x564431b40520_3, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40520_4 .array/port v0x564431b40520, 4;
L_0x564431b01500 .functor BUFZ 32, v0x564431b40520_4, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40520_5 .array/port v0x564431b40520, 5;
L_0x564431aff510 .functor BUFZ 32, v0x564431b40520_5, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40520_6 .array/port v0x564431b40520, 6;
L_0x564431b12df0 .functor BUFZ 32, v0x564431b40520_6, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40520_7 .array/port v0x564431b40520, 7;
L_0x564431b54580 .functor BUFZ 32, v0x564431b40520_7, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40220_0 .array/port v0x564431b40220, 0;
L_0x564431b546a0 .functor BUFZ 32, v0x564431b40220_0, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40220_1 .array/port v0x564431b40220, 1;
L_0x564431b54770 .functor BUFZ 32, v0x564431b40220_1, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40220_2 .array/port v0x564431b40220, 2;
L_0x564431b548a0 .functor BUFZ 32, v0x564431b40220_2, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40220_3 .array/port v0x564431b40220, 3;
L_0x564431b54970 .functor BUFZ 32, v0x564431b40220_3, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40220_4 .array/port v0x564431b40220, 4;
L_0x564431b54ab0 .functor BUFZ 32, v0x564431b40220_4, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40220_5 .array/port v0x564431b40220, 5;
L_0x564431b54b80 .functor BUFZ 32, v0x564431b40220_5, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40220_6 .array/port v0x564431b40220, 6;
L_0x564431b54a40 .functor BUFZ 32, v0x564431b40220_6, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40220_7 .array/port v0x564431b40220, 7;
L_0x564431b54d30 .functor BUFZ 32, v0x564431b40220_7, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b40160_0 .var "clk", 0 0;
v0x564431b40220 .array/2s "frequencies", 0 7, 31 0;
v0x564431b40430_0 .net/2s "sample", 15 0, L_0x564431b54e90;  1 drivers
v0x564431b40520 .array/2s "voice_volumes", 0 7, 31 0;
L_0x564431b54e90 .cast/2 16, L_0x564431b540a0;
S_0x564431b04280 .scope begin, "$ivl_foreach0" "$ivl_foreach0" 3 21, 3 21 0, S_0x564431b021f0;
 .timescale 0 0;
v0x564431b07140_0 .var/2s "i", 31 0;
S_0x564431b06280 .scope task, "run_and_assert" "run_and_assert" 3 68, 3 68 0, S_0x564431b021f0;
 .timescale 0 0;
v0x564431b03140_0 .var/2s "expected_sample", 15 0;
TD_synthesizer_tb.run_and_assert ;
    %fork t_1, S_0x564431b08280;
    %jmp t_0;
    .scope S_0x564431b08280;
t_1 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0x564431b05140_0, 0, 32;
T_0.0 ;
    %load/vec4 v0x564431b05140_0;
    %cmpi/s 16, 0, 32;
    %jmp/0xz T_0.1, 5;
    %load/vec4 v0x564431b05140_0;
    %muli 3, 0, 32;
    %pad/s 64;
    %muli 1, 0, 64;
    %ix/vec4 4;
    %delayx 4;
    %delay 1, 0;
    %load/vec4 v0x564431b40160_0;
    %nor/r;
    %store/vec4 v0x564431b40160_0, 0, 1;
    %delay 1, 0;
    %load/vec4 v0x564431b40160_0;
    %nor/r;
    %store/vec4 v0x564431b40160_0, 0, 1;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0x564431b05140_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0x564431b05140_0, 0, 32;
    %jmp T_0.0;
T_0.1 ;
    %end;
    .scope S_0x564431b06280;
t_0 %join;
    %delay 1, 0;
    %load/vec4 v0x564431b40430_0;
    %load/vec4 v0x564431b03140_0;
    %cmp/e;
    %jmp/0xz  T_0.2, 4;
    %jmp T_0.3;
T_0.2 ;
    %vpi_call/w 3 76 "$error", "The square_value is:%d , The value expected is:%d", v0x564431b40430_0, v0x564431b03140_0 {0 0 0};
T_0.3 ;
    %end;
S_0x564431b08280 .scope begin, "$ivl_for_loop0" "$ivl_for_loop0" 3 69, 3 69 0, S_0x564431b06280;
 .timescale 0 0;
v0x564431b05140_0 .var/2s "i", 31 0;
S_0x564431b0a280 .scope module, "synth" "Synthesizer" 3 10, 4 1 0, S_0x564431b021f0;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 64 "clock_speed_divided_by_16";
    .port_info 2 /INPUT 1 "filter_enabled";
    .port_info 3 /INPUT 3 "cutoff";
    .port_info 4 /INPUT 256 "voice_volumes";
    .port_info 5 /INPUT 256 "frequencies";
    .port_info 6 /OUTPUT 16 "out";
P_0x564431b348a0 .param/l "N_FILTERS" 1 4 69, +C4<00000000000000000000000000001000>;
L_0x564431b54fb0 .functor BUFT 32, L_0x564431b53e70, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x564431b3dd80_0 .net *"_ivl_10", 4 0, L_0x564431b42f20;  1 drivers
L_0x7f15ab41c258 .functor BUFT 1, C4<00>, C4<0>, C4<0>, C4<0>;
v0x564431b3de80_0 .net *"_ivl_13", 1 0, L_0x7f15ab41c258;  1 drivers
v0x564431b3df60_0 .net *"_ivl_14", 63 0, L_0x564431b430a0;  1 drivers
L_0x7f15ab41c2a0 .functor BUFT 1, C4<00000000000000000000000000000000>, C4<0>, C4<0>, C4<0>;
v0x564431b3e050_0 .net *"_ivl_17", 31 0, L_0x7f15ab41c2a0;  1 drivers
v0x564431b3e130_0 .net *"_ivl_18", 63 0, L_0x564431b531d0;  1 drivers
v0x564431b3e260_0 .net *"_ivl_26", 4 0, L_0x564431b535c0;  1 drivers
L_0x7f15ab41c330 .functor BUFT 1, C4<00>, C4<0>, C4<0>, C4<0>;
v0x564431b3e340_0 .net *"_ivl_29", 1 0, L_0x7f15ab41c330;  1 drivers
v0x564431b3e420_0 .net *"_ivl_32", 4 0, L_0x564431b53880;  1 drivers
L_0x7f15ab41c378 .functor BUFT 1, C4<00>, C4<0>, C4<0>, C4<0>;
v0x564431b3e500_0 .net *"_ivl_35", 1 0, L_0x7f15ab41c378;  1 drivers
v0x564431b3e5e0_0 .net *"_ivl_36", 31 0, L_0x564431b539c0;  1 drivers
L_0x7f15ab41c528 .functor BUFT 1, C4<00100>, C4<0>, C4<0>, C4<0>;
v0x564431b3e6c0_0 .net *"_ivl_38", 4 0, L_0x7f15ab41c528;  1 drivers
v0x564431b3e7a0_0 .net *"_ivl_42", 31 0, L_0x564431b53c50;  1 drivers
v0x564431b3e880_0 .net *"_ivl_44", 15 0, L_0x564431b53b30;  1 drivers
L_0x7f15ab41c3c0 .functor BUFT 1, C4<0000000000000000>, C4<0>, C4<0>, C4<0>;
v0x564431b3e960_0 .net *"_ivl_46", 15 0, L_0x7f15ab41c3c0;  1 drivers
v0x564431b3ea40_0 .net *"_ivl_48", 31 0, L_0x564431b53e70;  1 drivers
v0x564431b3eb20_0 .net *"_ivl_50", 25 0, L_0x564431b53a60;  1 drivers
L_0x7f15ab41c408 .functor BUFT 1, C4<000000>, C4<0>, C4<0>, C4<0>;
v0x564431b3ec00_0 .net *"_ivl_52", 5 0, L_0x7f15ab41c408;  1 drivers
v0x564431b3edf0_0 .net *"_ivl_54", 31 0, L_0x564431b54fb0;  1 drivers
v0x564431b3eed0_0 .net *"_ivl_8", 31 0, L_0x564431b42e80;  1 drivers
v0x564431b3efb0_0 .net "clk", 0 0, v0x564431b40160_0;  1 drivers
L_0x7f15ab41c450 .functor BUFT 1, C4<0000000000000000000000000000000000001101110000000000000000000000>, C4<0>, C4<0>, C4<0>;
v0x564431b3f050_0 .net "clock_speed_divided_by_16", 63 0, L_0x7f15ab41c450;  1 drivers
v0x564431b3f130_0 .var/2s "combined", 31 0;
v0x564431b3f210_0 .var/2s "combined_result", 31 0;
L_0x7f15ab41c4e0 .functor BUFT 1, C4<100>, C4<0>, C4<0>, C4<0>;
v0x564431b3f2f0_0 .net "cutoff", 2 0, L_0x7f15ab41c4e0;  1 drivers
L_0x7f15ab41c498 .functor BUFT 1, C4<0>, C4<0>, C4<0>, C4<0>;
v0x564431b3f3d0_0 .net "filter_enabled", 0 0, L_0x7f15ab41c498;  1 drivers
v0x564431b3f490 .array "filter_outs", 0 7;
v0x564431b3f490_0 .net v0x564431b3f490 0, 31 0, L_0x564431b40730; 1 drivers
v0x564431b3f490_1 .net v0x564431b3f490 1, 31 0, L_0x564431b40c50; 1 drivers
v0x564431b3f490_2 .net v0x564431b3f490 2, 31 0, L_0x564431b41150; 1 drivers
v0x564431b3f490_3 .net v0x564431b3f490 3, 31 0, L_0x564431b41660; 1 drivers
v0x564431b3f490_4 .net v0x564431b3f490 4, 31 0, L_0x564431b41b20; 1 drivers
v0x564431b3f490_5 .net v0x564431b3f490 5, 31 0, L_0x564431b42020; 1 drivers
v0x564431b3f490_6 .net v0x564431b3f490 6, 31 0, L_0x564431b42510; 1 drivers
v0x564431b3f490_7 .net v0x564431b3f490 7, 31 0, L_0x564431b429f0; 1 drivers
v0x564431b3f6a0 .array "frequencies", 0 7;
v0x564431b3f6a0_0 .net v0x564431b3f6a0 0, 31 0, L_0x564431b546a0; 1 drivers
v0x564431b3f6a0_1 .net v0x564431b3f6a0 1, 31 0, L_0x564431b54770; 1 drivers
v0x564431b3f6a0_2 .net v0x564431b3f6a0 2, 31 0, L_0x564431b548a0; 1 drivers
v0x564431b3f6a0_3 .net v0x564431b3f6a0 3, 31 0, L_0x564431b54970; 1 drivers
v0x564431b3f6a0_4 .net v0x564431b3f6a0 4, 31 0, L_0x564431b54ab0; 1 drivers
v0x564431b3f6a0_5 .net v0x564431b3f6a0 5, 31 0, L_0x564431b54b80; 1 drivers
v0x564431b3f6a0_6 .net v0x564431b3f6a0 6, 31 0, L_0x564431b54a40; 1 drivers
v0x564431b3f6a0_7 .net v0x564431b3f6a0 7, 31 0, L_0x564431b54d30; 1 drivers
v0x564431b3f7b0_0 .var/2s "mixed_sample", 31 0;
v0x564431b3f890_0 .net "out", 15 0, L_0x564431b540a0;  1 drivers
v0x564431b3f970_0 .var "step", 0 0;
v0x564431b3fa30_0 .var "voice", 2 0;
v0x564431b3fb10 .array/2s "voice_counters", 0 7, 31 0;
v0x564431b3fbd0 .array/2s "voice_samples", 0 7, 31 0;
v0x564431b3fc90 .array "voice_volumes", 0 7;
v0x564431b3fc90_0 .net v0x564431b3fc90 0, 31 0, L_0x564431b09630; 1 drivers
v0x564431b3fc90_1 .net v0x564431b3fc90 1, 31 0, L_0x564431b07630; 1 drivers
v0x564431b3fc90_2 .net v0x564431b3fc90 2, 31 0, L_0x564431b05630; 1 drivers
v0x564431b3fc90_3 .net v0x564431b3fc90 3, 31 0, L_0x564431b03630; 1 drivers
v0x564431b3fc90_4 .net v0x564431b3fc90 4, 31 0, L_0x564431b01500; 1 drivers
v0x564431b3fc90_5 .net v0x564431b3fc90 5, 31 0, L_0x564431aff510; 1 drivers
v0x564431b3fc90_6 .net v0x564431b3fc90 6, 31 0, L_0x564431b12df0; 1 drivers
v0x564431b3fc90_7 .net v0x564431b3fc90 7, 31 0, L_0x564431b54580; 1 drivers
L_0x564431b40820 .part v0x564431b3f210_0, 0, 25;
L_0x564431b40d90 .part v0x564431b3f210_0, 0, 25;
L_0x564431b41290 .part v0x564431b3f210_0, 0, 25;
L_0x564431b417a0 .part v0x564431b3f210_0, 0, 25;
L_0x564431b41c60 .part v0x564431b3f210_0, 0, 25;
L_0x564431b42160 .part v0x564431b3f210_0, 0, 25;
L_0x564431b42650 .part v0x564431b3f210_0, 0, 25;
L_0x564431b42b30 .part v0x564431b3f210_0, 0, 25;
L_0x564431b42e80 .array/port v0x564431b3f6a0, L_0x564431b42f20;
L_0x564431b42f20 .concat [ 3 2 0 0], v0x564431b3fa30_0, L_0x7f15ab41c258;
L_0x564431b430a0 .concat [ 32 32 0 0], L_0x564431b42e80, L_0x7f15ab41c2a0;
L_0x564431b531d0 .arith/div 64, L_0x7f15ab41c450, L_0x564431b430a0;
L_0x564431b53360 .part L_0x564431b531d0, 0, 32;
L_0x564431b534a0 .array/port v0x564431b3fbd0, L_0x564431b535c0;
L_0x564431b535c0 .concat [ 3 2 0 0], v0x564431b3fa30_0, L_0x7f15ab41c330;
L_0x564431b53750 .array/port v0x564431b3fb10, L_0x564431b53880;
L_0x564431b53880 .concat [ 3 2 0 0], v0x564431b3fa30_0, L_0x7f15ab41c378;
L_0x564431b539c0 .array/port v0x564431b3f490, L_0x7f15ab41c528;
L_0x564431b53b30 .part L_0x564431b539c0, 16, 16;
L_0x564431b53c50 .concat [ 16 16 0 0], L_0x564431b53b30, L_0x7f15ab41c3c0;
L_0x564431b53a60 .part v0x564431b3f210_0, 6, 26;
L_0x564431b53e70 .concat [ 26 6 0 0], L_0x564431b53a60, L_0x7f15ab41c408;
L_0x564431b540a0 .part L_0x564431b54fb0, 0, 16;
S_0x564431b349f0 .scope begin, "$ivl_for_loop1" "$ivl_for_loop1" 4 13, 4 13 0, S_0x564431b0a280;
 .timescale 0 0;
v0x564431b01660_0 .var/2s "i", 31 0;
S_0x564431b34c30 .scope function.vec2.u32, "mix_voice" "mix_voice" 4 61, 4 61 0, S_0x564431b0a280;
 .timescale 0 0;
v0x564431aff670_0 .var "index", 2 0;
; Variable mix_voice is bool return value of scope S_0x564431b34c30
TD_synthesizer_tb.synth.mix_voice ;
    %load/vec4 v0x564431b3c9b0_0;
    %pad/s 64;
    %load/vec4 v0x564431aff670_0;
    %pad/u 5;
    %ix/vec4 4;
    %load/vec4a v0x564431b3fc90, 4;
    %pad/u 64;
    %cast2;
    %store/vec4 v0x564431b353b0_0, 0, 64;
    %store/vec4 v0x564431b352b0_0, 0, 64;
    %callf/vec4 TD_synthesizer_tb.synth.multiply, S_0x564431b350d0;
    %ret/vec4 0, 0, 32;  Assign to mix_voice (store_vec4_to_lval)
    %disable S_0x564431b34c30;
    %end;
S_0x564431b34eb0 .scope task, "mix_voices" "mix_voices" 4 54, 4 54 0, S_0x564431b0a280;
 .timescale 0 0;
v0x564431b14720_0 .var "index", 2 0;
TD_synthesizer_tb.synth.mix_voices ;
    %load/vec4 v0x564431b3c9b0_0;
    %load/vec4 v0x564431b14720_0;
    %pad/u 5;
    %ix/vec4 3;
    %ix/load 4, 0, 0; Constant delay
    %assign/vec4/a/d v0x564431b3fbd0, 0, 4;
    %load/vec4 v0x564431b3c8b0_0;
    %load/vec4 v0x564431b14720_0;
    %pad/u 5;
    %ix/vec4 3;
    %ix/load 4, 0, 0; Constant delay
    %assign/vec4/a/d v0x564431b3fb10, 0, 4;
    %load/vec4 v0x564431b14720_0;
    %store/vec4 v0x564431aff670_0, 0, 3;
    %callf/vec4 TD_synthesizer_tb.synth.mix_voice, S_0x564431b34c30;
    %assign/vec4 v0x564431b3f7b0_0, 0;
    %load/vec4 v0x564431b14720_0;
    %pad/u 32;
    %cmpi/e 0, 0, 32;
    %flag_mov 8, 4;
    %jmp/0 T_2.4, 8;
    %load/vec4 v0x564431b3f7b0_0;
    %jmp/1 T_2.5, 8;
T_2.4 ; End of true expr.
    %load/vec4 v0x564431b3f130_0;
    %load/vec4 v0x564431b3f7b0_0;
    %add;
    %jmp/0 T_2.5, 8;
 ; End of false expr.
    %blend;
T_2.5;
    %cast2;
    %assign/vec4 v0x564431b3f130_0, 0;
    %end;
S_0x564431b350d0 .scope function.vec2.u32, "multiply" "multiply" 5 1, 5 1 0, S_0x564431b0a280;
 .timescale 0 0;
v0x564431b352b0_0 .var/2s "a", 63 0;
v0x564431b353b0_0 .var/2s "b", 63 0;
; Variable multiply is bool return value of scope S_0x564431b350d0
TD_synthesizer_tb.synth.multiply ;
    %load/vec4 v0x564431b352b0_0;
    %load/vec4 v0x564431b353b0_0;
    %mul;
    %ix/load 4, 20, 0;
    %flag_set/imm 4, 0;
    %shiftr/s 4;
    %cast2;
    %pad/s 32;
    %ret/vec4 0, 0, 32;  Assign to multiply (store_vec4_to_lval)
    %disable S_0x564431b350d0;
    %end;
S_0x564431b35550 .scope generate, "set_filters[0]" "set_filters[0]" 4 73, 4 73 0, S_0x564431b0a280;
 .timescale 0 0;
P_0x564431b357a0 .param/l "i" 0 4 73, +C4<00>;
v0x564431b35fc0_0 .net *"_ivl_0", 31 0, L_0x564431b40950;  1 drivers
v0x564431b360a0_0 .net *"_ivl_1", 24 0, L_0x564431b40820;  1 drivers
L_0x7f15ab41c018 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x564431b36180_0 .net *"_ivl_3", 6 0, L_0x7f15ab41c018;  1 drivers
L_0x564431b40950 .concat [ 7 25 0 0], L_0x7f15ab41c018, L_0x564431b40820;
L_0x564431b40ac0 .cast/2 32, L_0x564431b40950;
S_0x564431b35880 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x564431b35550;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x564431b127a0 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000000>;
P_0x564431b127e0 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x564431b35bb0_0 .var/s "accumulator", 31 0;
v0x564431b35cb0_0 .net "clk", 0 0, v0x564431b40160_0;  alias, 1 drivers
v0x564431b35d70_0 .net/2s "in", 31 0, L_0x564431b40ac0;  1 drivers
v0x564431b35e60_0 .net/2s "out", 31 0, L_0x564431b40730;  alias, 1 drivers
E_0x564431af1540 .event posedge, v0x564431b35cb0_0;
L_0x564431b40730 .cast/2 32, v0x564431b35bb0_0;
S_0x564431b36270 .scope generate, "set_filters[1]" "set_filters[1]" 4 73, 4 73 0, S_0x564431b0a280;
 .timescale 0 0;
P_0x564431b36470 .param/l "i" 0 4 73, +C4<01>;
v0x564431b36dd0_0 .net *"_ivl_0", 31 0, L_0x564431b40e80;  1 drivers
v0x564431b36eb0_0 .net *"_ivl_1", 24 0, L_0x564431b40d90;  1 drivers
L_0x7f15ab41c060 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x564431b36f90_0 .net *"_ivl_3", 6 0, L_0x7f15ab41c060;  1 drivers
L_0x564431b40e80 .concat [ 7 25 0 0], L_0x7f15ab41c060, L_0x564431b40d90;
L_0x564431b40fc0 .cast/2 32, L_0x564431b40e80;
S_0x564431b36550 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x564431b36270;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x564431b19bd0 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000001>;
P_0x564431b19c10 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x564431b368a0_0 .net *"_ivl_1", 31 0, L_0x564431b40bb0;  1 drivers
v0x564431b369a0_0 .var/s "accumulator", 32 0;
v0x564431b36a80_0 .net "clk", 0 0, v0x564431b40160_0;  alias, 1 drivers
v0x564431b36b80_0 .net/2s "in", 31 0, L_0x564431b40fc0;  1 drivers
v0x564431b36c20_0 .net/2s "out", 31 0, L_0x564431b40c50;  alias, 1 drivers
L_0x564431b40bb0 .part v0x564431b369a0_0, 1, 32;
L_0x564431b40c50 .cast/2 32, L_0x564431b40bb0;
S_0x564431b37050 .scope generate, "set_filters[2]" "set_filters[2]" 4 73, 4 73 0, S_0x564431b0a280;
 .timescale 0 0;
P_0x564431b37250 .param/l "i" 0 4 73, +C4<010>;
v0x564431b37bf0_0 .net *"_ivl_0", 31 0, L_0x564431b41360;  1 drivers
v0x564431b37cd0_0 .net *"_ivl_1", 24 0, L_0x564431b41290;  1 drivers
L_0x7f15ab41c0a8 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x564431b37db0_0 .net *"_ivl_3", 6 0, L_0x7f15ab41c0a8;  1 drivers
L_0x564431b41360 .concat [ 7 25 0 0], L_0x7f15ab41c0a8, L_0x564431b41290;
L_0x564431b414d0 .cast/2 32, L_0x564431b41360;
S_0x564431b37330 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x564431b37050;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x564431b19b00 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000010>;
P_0x564431b19b40 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x564431b37680_0 .net *"_ivl_1", 31 0, L_0x564431b410b0;  1 drivers
v0x564431b37780_0 .var/s "accumulator", 33 0;
v0x564431b37860_0 .net "clk", 0 0, v0x564431b40160_0;  alias, 1 drivers
v0x564431b37980_0 .net/2s "in", 31 0, L_0x564431b414d0;  1 drivers
v0x564431b37a40_0 .net/2s "out", 31 0, L_0x564431b41150;  alias, 1 drivers
L_0x564431b410b0 .part v0x564431b37780_0, 2, 32;
L_0x564431b41150 .cast/2 32, L_0x564431b410b0;
S_0x564431b37e70 .scope generate, "set_filters[3]" "set_filters[3]" 4 73, 4 73 0, S_0x564431b0a280;
 .timescale 0 0;
P_0x564431b38070 .param/l "i" 0 4 73, +C4<011>;
v0x564431b38990_0 .net *"_ivl_0", 31 0, L_0x564431b41870;  1 drivers
v0x564431b38a70_0 .net *"_ivl_1", 24 0, L_0x564431b417a0;  1 drivers
L_0x7f15ab41c0f0 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x564431b38b50_0 .net *"_ivl_3", 6 0, L_0x7f15ab41c0f0;  1 drivers
L_0x564431b41870 .concat [ 7 25 0 0], L_0x7f15ab41c0f0, L_0x564431b417a0;
L_0x564431b41990 .cast/2 32, L_0x564431b41870;
S_0x564431b38150 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x564431b37e70;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x564431b19910 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000011>;
P_0x564431b19950 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x564431b38470_0 .net *"_ivl_1", 31 0, L_0x564431b415c0;  1 drivers
v0x564431b38570_0 .var/s "accumulator", 34 0;
v0x564431b38650_0 .net "clk", 0 0, v0x564431b40160_0;  alias, 1 drivers
v0x564431b38720_0 .net/2s "in", 31 0, L_0x564431b41990;  1 drivers
v0x564431b387e0_0 .net/2s "out", 31 0, L_0x564431b41660;  alias, 1 drivers
L_0x564431b415c0 .part v0x564431b38570_0, 3, 32;
L_0x564431b41660 .cast/2 32, L_0x564431b415c0;
S_0x564431b38c10 .scope generate, "set_filters[4]" "set_filters[4]" 4 73, 4 73 0, S_0x564431b0a280;
 .timescale 0 0;
P_0x564431b35750 .param/l "i" 0 4 73, +C4<0100>;
v0x564431b396c0_0 .net *"_ivl_0", 31 0, L_0x564431b41d50;  1 drivers
v0x564431b397a0_0 .net *"_ivl_1", 24 0, L_0x564431b41c60;  1 drivers
L_0x7f15ab41c138 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x564431b39880_0 .net *"_ivl_3", 6 0, L_0x7f15ab41c138;  1 drivers
L_0x564431b41d50 .concat [ 7 25 0 0], L_0x7f15ab41c138, L_0x564431b41c60;
L_0x564431b41e90 .cast/2 32, L_0x564431b41d50;
S_0x564431b38ea0 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x564431b38c10;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x564431b19c60 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000100>;
P_0x564431b19ca0 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x564431b391f0_0 .net *"_ivl_1", 31 0, L_0x564431b41a80;  1 drivers
v0x564431b392f0_0 .var/s "accumulator", 35 0;
v0x564431b393d0_0 .net "clk", 0 0, v0x564431b40160_0;  alias, 1 drivers
v0x564431b394a0_0 .net/2s "in", 31 0, L_0x564431b41e90;  1 drivers
v0x564431b39560_0 .net/2s "out", 31 0, L_0x564431b41b20;  alias, 1 drivers
L_0x564431b41a80 .part v0x564431b392f0_0, 4, 32;
L_0x564431b41b20 .cast/2 32, L_0x564431b41a80;
S_0x564431b39940 .scope generate, "set_filters[5]" "set_filters[5]" 4 73, 4 73 0, S_0x564431b0a280;
 .timescale 0 0;
P_0x564431b39b40 .param/l "i" 0 4 73, +C4<0101>;
v0x564431b3a5b0_0 .net *"_ivl_0", 31 0, L_0x564431b42240;  1 drivers
v0x564431b3a690_0 .net *"_ivl_1", 24 0, L_0x564431b42160;  1 drivers
L_0x7f15ab41c180 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x564431b3a770_0 .net *"_ivl_3", 6 0, L_0x7f15ab41c180;  1 drivers
L_0x564431b42240 .concat [ 7 25 0 0], L_0x7f15ab41c180, L_0x564431b42160;
L_0x564431b42380 .cast/2 32, L_0x564431b42240;
S_0x564431b39c20 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x564431b39940;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x564431b39e00 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000101>;
P_0x564431b39e40 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x564431b3a090_0 .net *"_ivl_1", 31 0, L_0x564431b41f80;  1 drivers
v0x564431b3a190_0 .var/s "accumulator", 36 0;
v0x564431b3a270_0 .net "clk", 0 0, v0x564431b40160_0;  alias, 1 drivers
v0x564431b3a340_0 .net/2s "in", 31 0, L_0x564431b42380;  1 drivers
v0x564431b3a400_0 .net/2s "out", 31 0, L_0x564431b42020;  alias, 1 drivers
L_0x564431b41f80 .part v0x564431b3a190_0, 5, 32;
L_0x564431b42020 .cast/2 32, L_0x564431b41f80;
S_0x564431b3a830 .scope generate, "set_filters[6]" "set_filters[6]" 4 73, 4 73 0, S_0x564431b0a280;
 .timescale 0 0;
P_0x564431b3aa30 .param/l "i" 0 4 73, +C4<0110>;
v0x564431b3b410_0 .net *"_ivl_0", 31 0, L_0x564431b426f0;  1 drivers
v0x564431b3b4f0_0 .net *"_ivl_1", 24 0, L_0x564431b42650;  1 drivers
L_0x7f15ab41c1c8 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x564431b3b5d0_0 .net *"_ivl_3", 6 0, L_0x7f15ab41c1c8;  1 drivers
L_0x564431b426f0 .concat [ 7 25 0 0], L_0x7f15ab41c1c8, L_0x564431b42650;
L_0x564431b42860 .cast/2 32, L_0x564431b426f0;
S_0x564431b3ab10 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x564431b3a830;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x564431b39ee0 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000110>;
P_0x564431b39f20 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x564431b3aef0_0 .net *"_ivl_1", 31 0, L_0x564431b42470;  1 drivers
v0x564431b3aff0_0 .var/s "accumulator", 37 0;
v0x564431b3b0d0_0 .net "clk", 0 0, v0x564431b40160_0;  alias, 1 drivers
v0x564431b3b1a0_0 .net/2s "in", 31 0, L_0x564431b42860;  1 drivers
v0x564431b3b260_0 .net/2s "out", 31 0, L_0x564431b42510;  alias, 1 drivers
L_0x564431b42470 .part v0x564431b3aff0_0, 6, 32;
L_0x564431b42510 .cast/2 32, L_0x564431b42470;
S_0x564431b3b690 .scope generate, "set_filters[7]" "set_filters[7]" 4 73, 4 73 0, S_0x564431b0a280;
 .timescale 0 0;
P_0x564431b3b890 .param/l "i" 0 4 73, +C4<0111>;
v0x564431b3c270_0 .net *"_ivl_0", 31 0, L_0x564431b42c20;  1 drivers
v0x564431b3c350_0 .net *"_ivl_1", 24 0, L_0x564431b42b30;  1 drivers
L_0x7f15ab41c210 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x564431b3c430_0 .net *"_ivl_3", 6 0, L_0x7f15ab41c210;  1 drivers
L_0x564431b42c20 .concat [ 7 25 0 0], L_0x7f15ab41c210, L_0x564431b42b30;
L_0x564431b42d90 .cast/2 32, L_0x564431b42c20;
S_0x564431b3b970 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x564431b3b690;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x564431b3ad40 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000111>;
P_0x564431b3ad80 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x564431b3bd50_0 .net *"_ivl_1", 31 0, L_0x564431b42950;  1 drivers
v0x564431b3be50_0 .var/s "accumulator", 38 0;
v0x564431b3bf30_0 .net "clk", 0 0, v0x564431b40160_0;  alias, 1 drivers
v0x564431b3c000_0 .net/2s "in", 31 0, L_0x564431b42d90;  1 drivers
v0x564431b3c0c0_0 .net/2s "out", 31 0, L_0x564431b429f0;  alias, 1 drivers
L_0x564431b42950 .part v0x564431b3be50_0, 7, 32;
L_0x564431b429f0 .cast/2 32, L_0x564431b42950;
S_0x564431b3c4f0 .scope task, "set_output" "set_output" 4 65, 4 65 0, S_0x564431b0a280;
 .timescale 0 0;
TD_synthesizer_tb.synth.set_output ;
    %load/vec4 v0x564431b3f130_0;
    %assign/vec4 v0x564431b3f210_0, 0;
    %end;
S_0x564431b3c6d0 .scope module, "square" "OscilatorWires" 4 26, 4 82 0, S_0x564431b0a280;
 .timescale 0 0;
v0x564431b3c8b0_0 .net/2s "counter", 31 0, v0x564431b3d780_0;  1 drivers
v0x564431b3c9b0_0 .net/2s "out", 31 0, v0x564431b3d870_0;  1 drivers
v0x564431b3ca90_0 .net "wave_length", 31 0, L_0x564431b53360;  1 drivers
S_0x564431b3cb80 .scope module, "square_oscilator" "Square" 4 29, 7 1 0, S_0x564431b0a280;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 1 "set";
    .port_info 2 /INPUT 32 "set_sample";
    .port_info 3 /INPUT 32 "set_counter";
    .port_info 4 /INPUT 32 "wave_length";
    .port_info 5 /OUTPUT 32 "counter";
    .port_info 6 /OUTPUT 32 "out";
v0x564431b3d6c0_0 .net "clk", 0 0, v0x564431b40160_0;  alias, 1 drivers
v0x564431b3d780_0 .var/2s "counter", 31 0;
v0x564431b3d870_0 .var/2s "out", 31 0;
L_0x7f15ab41c2e8 .functor BUFT 1, C4<1>, C4<0>, C4<0>, C4<0>;
v0x564431b3d970_0 .net "set", 0 0, L_0x7f15ab41c2e8;  1 drivers
v0x564431b3da10_0 .net "set_counter", 31 0, L_0x564431b53750;  1 drivers
v0x564431b3db20_0 .net "set_sample", 31 0, L_0x564431b534a0;  1 drivers
v0x564431b3dc00_0 .net "wave_length", 31 0, L_0x564431b53360;  alias, 1 drivers
S_0x564431b3ce10 .scope function.vec2.u32, "get_counter" "get_counter" 7 33, 7 33 0, S_0x564431b3cb80;
 .timescale 0 0;
; Variable get_counter is bool return value of scope S_0x564431b3ce10
TD_synthesizer_tb.synth.square_oscilator.get_counter ;
    %load/vec4 v0x564431b3d970_0;
    %flag_set/vec4 8;
    %jmp/0 T_5.6, 8;
    %load/vec4 v0x564431b3da10_0;
    %jmp/1 T_5.7, 8;
T_5.6 ; End of true expr.
    %load/vec4 v0x564431b3d780_0;
    %jmp/0 T_5.7, 8;
 ; End of false expr.
    %blend;
T_5.7;
    %cast2;
    %ret/vec4 0, 0, 32;  Assign to get_counter (store_vec4_to_lval)
    %disable S_0x564431b3ce10;
    %end;
S_0x564431b3d110 .scope function.vec2.u32, "get_sample" "get_sample" 7 29, 7 29 0, S_0x564431b3cb80;
 .timescale 0 0;
; Variable get_sample is bool return value of scope S_0x564431b3d110
TD_synthesizer_tb.synth.square_oscilator.get_sample ;
    %load/vec4 v0x564431b3d970_0;
    %flag_set/vec4 8;
    %jmp/0 T_6.8, 8;
    %load/vec4 v0x564431b3db20_0;
    %jmp/1 T_6.9, 8;
T_6.8 ; End of true expr.
    %load/vec4 v0x564431b3d870_0;
    %jmp/0 T_6.9, 8;
 ; End of false expr.
    %blend;
T_6.9;
    %cast2;
    %ret/vec4 0, 0, 32;  Assign to get_sample (store_vec4_to_lval)
    %disable S_0x564431b3d110;
    %end;
S_0x564431b3d3f0 .scope function.vec2.s1, "should_flip_state" "should_flip_state" 7 25, 7 25 0, S_0x564431b3cb80;
 .timescale 0 0;
; Variable should_flip_state is bool return value of scope S_0x564431b3d3f0
TD_synthesizer_tb.synth.square_oscilator.should_flip_state ;
    %load/vec4 v0x564431b3dc00_0;
    %pushi/vec4 2, 0, 32;
    %div;
    %callf/vec4 TD_synthesizer_tb.synth.square_oscilator.get_counter, S_0x564431b3ce10;
    %cmp/u;
    %flag_get/vec4 4;
    %flag_get/vec4 5;
    %or;
    %cast2;
    %ret/vec4 0, 0, 1;  Assign to should_flip_state (store_vec4_to_lval)
    %disable S_0x564431b3d3f0;
    %end;
S_0x564431b3ff80 .scope task, "test_single_voice" "test_single_voice" 3 29, 3 29 0, S_0x564431b021f0;
 .timescale 0 0;
TD_synthesizer_tb.test_single_voice ;
    %pushi/vec4 57671680, 0, 32;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x564431b40220, 4, 0;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 115343360, 0, 32;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x564431b40220, 4, 0;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 57671680, 0, 32;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x564431b40220, 4, 0;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 115343360, 0, 32;
    %ix/load 4, 1, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x564431b40220, 4, 0;
    %pushi/vec4 0, 0, 32;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x564431b40520, 4, 0;
    %pushi/vec4 524288, 0, 32;
    %ix/load 4, 1, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x564431b40520, 4, 0;
    %pushi/vec4 57344, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 8192, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 524288, 0, 32;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x564431b40520, 4, 0;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 0, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 0, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 0, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 0, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x564431b03140_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x564431b06280;
    %join;
    %end;
    .scope S_0x564431b35880;
T_9 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0x564431b35bb0_0, 0, 32;
    %end;
    .thread T_9, $init;
    .scope S_0x564431b35880;
T_10 ;
    %wait E_0x564431af1540;
    %load/vec4 v0x564431b35bb0_0;
    %load/vec4 v0x564431b35d70_0;
    %add;
    %load/vec4 v0x564431b35e60_0;
    %sub;
    %assign/vec4 v0x564431b35bb0_0, 0;
    %jmp T_10;
    .thread T_10;
    .scope S_0x564431b36550;
T_11 ;
    %pushi/vec4 0, 0, 33;
    %store/vec4 v0x564431b369a0_0, 0, 33;
    %end;
    .thread T_11, $init;
    .scope S_0x564431b36550;
T_12 ;
    %wait E_0x564431af1540;
    %load/vec4 v0x564431b369a0_0;
    %load/vec4 v0x564431b36b80_0;
    %pad/s 33;
    %add;
    %load/vec4 v0x564431b36c20_0;
    %pad/s 33;
    %sub;
    %assign/vec4 v0x564431b369a0_0, 0;
    %jmp T_12;
    .thread T_12;
    .scope S_0x564431b37330;
T_13 ;
    %pushi/vec4 0, 0, 34;
    %store/vec4 v0x564431b37780_0, 0, 34;
    %end;
    .thread T_13, $init;
    .scope S_0x564431b37330;
T_14 ;
    %wait E_0x564431af1540;
    %load/vec4 v0x564431b37780_0;
    %load/vec4 v0x564431b37980_0;
    %pad/s 34;
    %add;
    %load/vec4 v0x564431b37a40_0;
    %pad/s 34;
    %sub;
    %assign/vec4 v0x564431b37780_0, 0;
    %jmp T_14;
    .thread T_14;
    .scope S_0x564431b38150;
T_15 ;
    %pushi/vec4 0, 0, 35;
    %store/vec4 v0x564431b38570_0, 0, 35;
    %end;
    .thread T_15, $init;
    .scope S_0x564431b38150;
T_16 ;
    %wait E_0x564431af1540;
    %load/vec4 v0x564431b38570_0;
    %load/vec4 v0x564431b38720_0;
    %pad/s 35;
    %add;
    %load/vec4 v0x564431b387e0_0;
    %pad/s 35;
    %sub;
    %assign/vec4 v0x564431b38570_0, 0;
    %jmp T_16;
    .thread T_16;
    .scope S_0x564431b38ea0;
T_17 ;
    %pushi/vec4 0, 0, 36;
    %store/vec4 v0x564431b392f0_0, 0, 36;
    %end;
    .thread T_17, $init;
    .scope S_0x564431b38ea0;
T_18 ;
    %wait E_0x564431af1540;
    %load/vec4 v0x564431b392f0_0;
    %load/vec4 v0x564431b394a0_0;
    %pad/s 36;
    %add;
    %load/vec4 v0x564431b39560_0;
    %pad/s 36;
    %sub;
    %assign/vec4 v0x564431b392f0_0, 0;
    %jmp T_18;
    .thread T_18;
    .scope S_0x564431b39c20;
T_19 ;
    %pushi/vec4 0, 0, 37;
    %store/vec4 v0x564431b3a190_0, 0, 37;
    %end;
    .thread T_19, $init;
    .scope S_0x564431b39c20;
T_20 ;
    %wait E_0x564431af1540;
    %load/vec4 v0x564431b3a190_0;
    %load/vec4 v0x564431b3a340_0;
    %pad/s 37;
    %add;
    %load/vec4 v0x564431b3a400_0;
    %pad/s 37;
    %sub;
    %assign/vec4 v0x564431b3a190_0, 0;
    %jmp T_20;
    .thread T_20;
    .scope S_0x564431b3ab10;
T_21 ;
    %pushi/vec4 0, 0, 38;
    %store/vec4 v0x564431b3aff0_0, 0, 38;
    %end;
    .thread T_21, $init;
    .scope S_0x564431b3ab10;
T_22 ;
    %wait E_0x564431af1540;
    %load/vec4 v0x564431b3aff0_0;
    %load/vec4 v0x564431b3b1a0_0;
    %pad/s 38;
    %add;
    %load/vec4 v0x564431b3b260_0;
    %pad/s 38;
    %sub;
    %assign/vec4 v0x564431b3aff0_0, 0;
    %jmp T_22;
    .thread T_22;
    .scope S_0x564431b3b970;
T_23 ;
    %pushi/vec4 0, 0, 39;
    %store/vec4 v0x564431b3be50_0, 0, 39;
    %end;
    .thread T_23, $init;
    .scope S_0x564431b3b970;
T_24 ;
    %wait E_0x564431af1540;
    %load/vec4 v0x564431b3be50_0;
    %load/vec4 v0x564431b3c000_0;
    %pad/s 39;
    %add;
    %load/vec4 v0x564431b3c0c0_0;
    %pad/s 39;
    %sub;
    %assign/vec4 v0x564431b3be50_0, 0;
    %jmp T_24;
    .thread T_24;
    .scope S_0x564431b3cb80;
T_25 ;
    %pushi/vec4 4293918720, 0, 32;
    %store/vec4 v0x564431b3d870_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0x564431b3d780_0, 0, 32;
    %end;
    .thread T_25;
    .scope S_0x564431b3cb80;
T_26 ;
    %wait E_0x564431af1540;
    %callf/vec4 TD_synthesizer_tb.synth.square_oscilator.should_flip_state, S_0x564431b3d3f0;
    %flag_set/vec4 8;
    %jmp/0xz  T_26.0, 8;
    %callf/vec4 TD_synthesizer_tb.synth.square_oscilator.get_sample, S_0x564431b3d110;
    %muli 4294967295, 0, 32;
    %cast2;
    %assign/vec4 v0x564431b3d870_0, 0;
    %pushi/vec4 1, 0, 32;
    %assign/vec4 v0x564431b3d780_0, 0;
    %jmp T_26.1;
T_26.0 ;
    %callf/vec4 TD_synthesizer_tb.synth.square_oscilator.get_sample, S_0x564431b3d110;
    %assign/vec4 v0x564431b3d870_0, 0;
    %callf/vec4 TD_synthesizer_tb.synth.square_oscilator.get_counter, S_0x564431b3ce10;
    %addi 1, 0, 32;
    %cast2;
    %assign/vec4 v0x564431b3d780_0, 0;
T_26.1 ;
    %jmp T_26;
    .thread T_26;
    .scope S_0x564431b0a280;
T_27 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0x564431b3f7b0_0, 0, 32;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0x564431b3f970_0, 0, 1;
    %pushi/vec4 0, 0, 3;
    %store/vec4 v0x564431b3fa30_0, 0, 3;
    %end;
    .thread T_27, $init;
    .scope S_0x564431b0a280;
T_28 ;
    %fork t_3, S_0x564431b349f0;
    %jmp t_2;
    .scope S_0x564431b349f0;
t_3 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0x564431b01660_0, 0, 32;
T_28.0 ;
    %load/vec4 v0x564431b01660_0;
    %cmpi/s 7, 0, 32;
    %jmp/0xz T_28.1, 5;
    %pushi/vec4 4293918720, 0, 32;
    %ix/getv/s 4, v0x564431b01660_0;
    %store/vec4a v0x564431b3fbd0, 4, 0;
    %pushi/vec4 1, 0, 32;
    %ix/getv/s 4, v0x564431b01660_0;
    %store/vec4a v0x564431b3fb10, 4, 0;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0x564431b01660_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0x564431b01660_0, 0, 32;
    %jmp T_28.0;
T_28.1 ;
    %end;
    .scope S_0x564431b0a280;
t_2 %join;
    %end;
    .thread T_28;
    .scope S_0x564431b0a280;
T_29 ;
    %wait E_0x564431af1540;
    %load/vec4 v0x564431b3f970_0;
    %pad/u 2;
    %addi 1, 0, 2;
    %pad/u 1;
    %assign/vec4 v0x564431b3f970_0, 0;
    %load/vec4 v0x564431b3f970_0;
    %pad/u 32;
    %cmpi/e 1, 0, 32;
    %jmp/0xz  T_29.0, 4;
    %load/vec4 v0x564431b3fa30_0;
    %store/vec4 v0x564431b14720_0, 0, 3;
    %fork TD_synthesizer_tb.synth.mix_voices, S_0x564431b34eb0;
    %join;
    %load/vec4 v0x564431b3fa30_0;
    %addi 1, 0, 3;
    %assign/vec4 v0x564431b3fa30_0, 0;
    %load/vec4 v0x564431b3fa30_0;
    %pad/u 32;
    %cmpi/e 7, 0, 32;
    %jmp/0xz  T_29.2, 4;
    %fork TD_synthesizer_tb.synth.set_output, S_0x564431b3c4f0;
    %join;
T_29.2 ;
T_29.0 ;
    %jmp T_29;
    .thread T_29;
    .scope S_0x564431b021f0;
T_30 ;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0x564431b40160_0, 0, 1;
    %end;
    .thread T_30, $init;
    .scope S_0x564431b021f0;
T_31 ;
    %fork t_5, S_0x564431b04280;
    %jmp t_4;
    .scope S_0x564431b04280;
t_5 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0x564431b07140_0, 0, 32;
T_31.0 ;
    %load/vec4 v0x564431b07140_0;
    %cmpi/s 7, 0, 32;
    %flag_or 5, 4;
    %jmp/0xz T_31.1, 5;
    %pushi/vec4 0, 0, 32;
    %ix/getv/s 4, v0x564431b07140_0;
    %store/vec4a v0x564431b40520, 4, 0;
    %pushi/vec4 57671680, 0, 32;
    %ix/getv/s 4, v0x564431b07140_0;
    %store/vec4a v0x564431b40220, 4, 0;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0x564431b07140_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0x564431b07140_0, 0, 32;
    %jmp T_31.0;
T_31.1 ;
    %end;
    .scope S_0x564431b021f0;
t_4 %join;
    %pushi/vec4 1048576, 0, 32;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x564431b40520, 4, 0;
    %fork TD_synthesizer_tb.test_single_voice, S_0x564431b3ff80;
    %join;
    %end;
    .thread T_31;
# The file index is used to find the file name in the following table.
:file_names 8;
    "N/A";
    "<interactive>";
    "-";
    "synthesizer_tb.sv";
    ".//Synthesizer.sv";
    "./multiply.sv";
    ".//iirLowPassSinglePole.sv";
    ".//Square.sv";
