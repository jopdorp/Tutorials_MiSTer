#! /usr/local/bin/vvp
:ivl_version "11.0 (stable)" "(s20150603-1103-g348bc13a)";
:ivl_delay_selection "TYPICAL";
:vpi_time_precision + 0;
:vpi_module "/usr/local/lib/ivl/system.vpi";
:vpi_module "/usr/local/lib/ivl/vhdl_sys.vpi";
:vpi_module "/usr/local/lib/ivl/vhdl_textio.vpi";
:vpi_module "/usr/local/lib/ivl/v2005_math.vpi";
:vpi_module "/usr/local/lib/ivl/va_math.vpi";
:vpi_module "/usr/local/lib/ivl/v2009.vpi";
S_0x56078bc36270 .scope package, "$unit" "$unit" 2 1;
 .timescale 0 0;
S_0x56078bc2c1d0 .scope module, "synthesizer_tb" "synthesizer_tb" 3 1;
 .timescale 0 0;
P_0x56078bc220d0 .param/l "clock_speed" 1 3 2, +C4<0000000000000000000000000000000000001101110000000000000000000000>;
v0x56078bc6a500_0 .array/port v0x56078bc6a500, 0;
L_0x56078bc33610 .functor BUFZ 32, v0x56078bc6a500_0, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a500_1 .array/port v0x56078bc6a500, 1;
L_0x56078bc31610 .functor BUFZ 32, v0x56078bc6a500_1, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a500_2 .array/port v0x56078bc6a500, 2;
L_0x56078bc2f610 .functor BUFZ 32, v0x56078bc6a500_2, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a500_3 .array/port v0x56078bc6a500, 3;
L_0x56078bc2d610 .functor BUFZ 32, v0x56078bc6a500_3, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a500_4 .array/port v0x56078bc6a500, 4;
L_0x56078bc2b4e0 .functor BUFZ 32, v0x56078bc6a500_4, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a500_5 .array/port v0x56078bc6a500, 5;
L_0x56078bc294f0 .functor BUFZ 32, v0x56078bc6a500_5, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a500_6 .array/port v0x56078bc6a500, 6;
L_0x56078bc3cdd0 .functor BUFZ 32, v0x56078bc6a500_6, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a500_7 .array/port v0x56078bc6a500, 7;
L_0x56078bc7e560 .functor BUFZ 32, v0x56078bc6a500_7, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a200_0 .array/port v0x56078bc6a200, 0;
L_0x56078bc7e680 .functor BUFZ 32, v0x56078bc6a200_0, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a200_1 .array/port v0x56078bc6a200, 1;
L_0x56078bc7e750 .functor BUFZ 32, v0x56078bc6a200_1, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a200_2 .array/port v0x56078bc6a200, 2;
L_0x56078bc7e880 .functor BUFZ 32, v0x56078bc6a200_2, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a200_3 .array/port v0x56078bc6a200, 3;
L_0x56078bc7e950 .functor BUFZ 32, v0x56078bc6a200_3, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a200_4 .array/port v0x56078bc6a200, 4;
L_0x56078bc7ea90 .functor BUFZ 32, v0x56078bc6a200_4, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a200_5 .array/port v0x56078bc6a200, 5;
L_0x56078bc7eb60 .functor BUFZ 32, v0x56078bc6a200_5, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a200_6 .array/port v0x56078bc6a200, 6;
L_0x56078bc7ea20 .functor BUFZ 32, v0x56078bc6a200_6, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a200_7 .array/port v0x56078bc6a200, 7;
L_0x56078bc7ed10 .functor BUFZ 32, v0x56078bc6a200_7, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc6a140_0 .var "clk", 0 0;
v0x56078bc6a200 .array/2s "frequencies", 0 7, 31 0;
v0x56078bc6a410_0 .net/2s "sample", 15 0, L_0x56078bc7ee70;  1 drivers
v0x56078bc6a500 .array/2s "voice_volumes", 0 7, 31 0;
L_0x56078bc7ee70 .cast/2 16, L_0x56078bc7e080;
S_0x56078bc2e260 .scope begin, "$ivl_foreach0" "$ivl_foreach0" 3 21, 3 21 0, S_0x56078bc2c1d0;
 .timescale 0 0;
v0x56078bc31120_0 .var/2s "i", 31 0;
S_0x56078bc30260 .scope task, "run_and_assert" "run_and_assert" 3 68, 3 68 0, S_0x56078bc2c1d0;
 .timescale 0 0;
v0x56078bc2d120_0 .var/2s "expected_sample", 15 0;
TD_synthesizer_tb.run_and_assert ;
    %fork t_1, S_0x56078bc32260;
    %jmp t_0;
    .scope S_0x56078bc32260;
t_1 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0x56078bc2f120_0, 0, 32;
T_0.0 ;
    %load/vec4 v0x56078bc2f120_0;
    %cmpi/s 16, 0, 32;
    %jmp/0xz T_0.1, 5;
    %load/vec4 v0x56078bc2f120_0;
    %muli 3, 0, 32;
    %pad/s 64;
    %muli 1, 0, 64;
    %ix/vec4 4;
    %delayx 4;
    %delay 1, 0;
    %load/vec4 v0x56078bc6a140_0;
    %nor/r;
    %store/vec4 v0x56078bc6a140_0, 0, 1;
    %delay 1, 0;
    %load/vec4 v0x56078bc6a140_0;
    %nor/r;
    %store/vec4 v0x56078bc6a140_0, 0, 1;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0x56078bc2f120_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0x56078bc2f120_0, 0, 32;
    %jmp T_0.0;
T_0.1 ;
    %end;
    .scope S_0x56078bc30260;
t_0 %join;
    %delay 1, 0;
    %load/vec4 v0x56078bc6a410_0;
    %load/vec4 v0x56078bc2d120_0;
    %cmp/e;
    %jmp/0xz  T_0.2, 4;
    %jmp T_0.3;
T_0.2 ;
    %vpi_call/w 3 76 "$error", "The square_value is:%d , The value expected is:%d", v0x56078bc6a410_0, v0x56078bc2d120_0 {0 0 0};
T_0.3 ;
    %end;
S_0x56078bc32260 .scope begin, "$ivl_for_loop0" "$ivl_for_loop0" 3 69, 3 69 0, S_0x56078bc30260;
 .timescale 0 0;
v0x56078bc2f120_0 .var/2s "i", 31 0;
S_0x56078bc34260 .scope module, "synth" "Synthesizer" 3 10, 4 1 0, S_0x56078bc2c1d0;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 64 "clock_speed_divided_by_16";
    .port_info 2 /INPUT 1 "filter_enabled";
    .port_info 3 /INPUT 3 "cutoff";
    .port_info 4 /INPUT 256 "voice_volumes";
    .port_info 5 /INPUT 256 "frequencies";
    .port_info 6 /OUTPUT 16 "out";
P_0x56078bc5e880 .param/l "N_FILTERS" 1 4 69, +C4<00000000000000000000000000001000>;
L_0x56078bc7ef90 .functor BUFT 32, L_0x56078bc7de50, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0x56078bc67d60_0 .net *"_ivl_10", 4 0, L_0x56078bc6cf00;  1 drivers
L_0x7f691ac33258 .functor BUFT 1, C4<00>, C4<0>, C4<0>, C4<0>;
v0x56078bc67e60_0 .net *"_ivl_13", 1 0, L_0x7f691ac33258;  1 drivers
v0x56078bc67f40_0 .net *"_ivl_14", 63 0, L_0x56078bc6d080;  1 drivers
L_0x7f691ac332a0 .functor BUFT 1, C4<00000000000000000000000000000000>, C4<0>, C4<0>, C4<0>;
v0x56078bc68030_0 .net *"_ivl_17", 31 0, L_0x7f691ac332a0;  1 drivers
v0x56078bc68110_0 .net *"_ivl_18", 63 0, L_0x56078bc7d1b0;  1 drivers
v0x56078bc68240_0 .net *"_ivl_26", 4 0, L_0x56078bc7d5a0;  1 drivers
L_0x7f691ac33330 .functor BUFT 1, C4<00>, C4<0>, C4<0>, C4<0>;
v0x56078bc68320_0 .net *"_ivl_29", 1 0, L_0x7f691ac33330;  1 drivers
v0x56078bc68400_0 .net *"_ivl_32", 4 0, L_0x56078bc7d860;  1 drivers
L_0x7f691ac33378 .functor BUFT 1, C4<00>, C4<0>, C4<0>, C4<0>;
v0x56078bc684e0_0 .net *"_ivl_35", 1 0, L_0x7f691ac33378;  1 drivers
v0x56078bc685c0_0 .net *"_ivl_36", 31 0, L_0x56078bc7d9a0;  1 drivers
L_0x7f691ac33528 .functor BUFT 1, C4<00100>, C4<0>, C4<0>, C4<0>;
v0x56078bc686a0_0 .net *"_ivl_38", 4 0, L_0x7f691ac33528;  1 drivers
v0x56078bc68780_0 .net *"_ivl_42", 31 0, L_0x56078bc7dc30;  1 drivers
v0x56078bc68860_0 .net *"_ivl_44", 15 0, L_0x56078bc7db10;  1 drivers
L_0x7f691ac333c0 .functor BUFT 1, C4<0000000000000000>, C4<0>, C4<0>, C4<0>;
v0x56078bc68940_0 .net *"_ivl_46", 15 0, L_0x7f691ac333c0;  1 drivers
v0x56078bc68a20_0 .net *"_ivl_48", 31 0, L_0x56078bc7de50;  1 drivers
v0x56078bc68b00_0 .net *"_ivl_50", 25 0, L_0x56078bc7da40;  1 drivers
L_0x7f691ac33408 .functor BUFT 1, C4<000000>, C4<0>, C4<0>, C4<0>;
v0x56078bc68be0_0 .net *"_ivl_52", 5 0, L_0x7f691ac33408;  1 drivers
v0x56078bc68dd0_0 .net *"_ivl_54", 31 0, L_0x56078bc7ef90;  1 drivers
v0x56078bc68eb0_0 .net *"_ivl_8", 31 0, L_0x56078bc6ce60;  1 drivers
v0x56078bc68f90_0 .net "clk", 0 0, v0x56078bc6a140_0;  1 drivers
L_0x7f691ac33450 .functor BUFT 1, C4<0000000000000000000000000000000000001101110000000000000000000000>, C4<0>, C4<0>, C4<0>;
v0x56078bc69030_0 .net "clock_speed_divided_by_16", 63 0, L_0x7f691ac33450;  1 drivers
v0x56078bc69110_0 .var/2s "combined", 31 0;
v0x56078bc691f0_0 .var/2s "combined_result", 31 0;
L_0x7f691ac334e0 .functor BUFT 1, C4<100>, C4<0>, C4<0>, C4<0>;
v0x56078bc692d0_0 .net "cutoff", 2 0, L_0x7f691ac334e0;  1 drivers
L_0x7f691ac33498 .functor BUFT 1, C4<0>, C4<0>, C4<0>, C4<0>;
v0x56078bc693b0_0 .net "filter_enabled", 0 0, L_0x7f691ac33498;  1 drivers
v0x56078bc69470 .array "filter_outs", 0 7;
v0x56078bc69470_0 .net v0x56078bc69470 0, 31 0, L_0x56078bc6a710; 1 drivers
v0x56078bc69470_1 .net v0x56078bc69470 1, 31 0, L_0x56078bc6ac30; 1 drivers
v0x56078bc69470_2 .net v0x56078bc69470 2, 31 0, L_0x56078bc6b130; 1 drivers
v0x56078bc69470_3 .net v0x56078bc69470 3, 31 0, L_0x56078bc6b640; 1 drivers
v0x56078bc69470_4 .net v0x56078bc69470 4, 31 0, L_0x56078bc6bb00; 1 drivers
v0x56078bc69470_5 .net v0x56078bc69470 5, 31 0, L_0x56078bc6c000; 1 drivers
v0x56078bc69470_6 .net v0x56078bc69470 6, 31 0, L_0x56078bc6c4f0; 1 drivers
v0x56078bc69470_7 .net v0x56078bc69470 7, 31 0, L_0x56078bc6c9d0; 1 drivers
v0x56078bc69680 .array "frequencies", 0 7;
v0x56078bc69680_0 .net v0x56078bc69680 0, 31 0, L_0x56078bc7e680; 1 drivers
v0x56078bc69680_1 .net v0x56078bc69680 1, 31 0, L_0x56078bc7e750; 1 drivers
v0x56078bc69680_2 .net v0x56078bc69680 2, 31 0, L_0x56078bc7e880; 1 drivers
v0x56078bc69680_3 .net v0x56078bc69680 3, 31 0, L_0x56078bc7e950; 1 drivers
v0x56078bc69680_4 .net v0x56078bc69680 4, 31 0, L_0x56078bc7ea90; 1 drivers
v0x56078bc69680_5 .net v0x56078bc69680 5, 31 0, L_0x56078bc7eb60; 1 drivers
v0x56078bc69680_6 .net v0x56078bc69680 6, 31 0, L_0x56078bc7ea20; 1 drivers
v0x56078bc69680_7 .net v0x56078bc69680 7, 31 0, L_0x56078bc7ed10; 1 drivers
v0x56078bc69790_0 .var/2s "mixed_sample", 31 0;
v0x56078bc69870_0 .net "out", 15 0, L_0x56078bc7e080;  1 drivers
v0x56078bc69950_0 .var "step", 0 0;
v0x56078bc69a10_0 .var "voice", 2 0;
v0x56078bc69af0 .array/2s "voice_counters", 0 7, 31 0;
v0x56078bc69bb0 .array/2s "voice_samples", 0 7, 31 0;
v0x56078bc69c70 .array "voice_volumes", 0 7;
v0x56078bc69c70_0 .net v0x56078bc69c70 0, 31 0, L_0x56078bc33610; 1 drivers
v0x56078bc69c70_1 .net v0x56078bc69c70 1, 31 0, L_0x56078bc31610; 1 drivers
v0x56078bc69c70_2 .net v0x56078bc69c70 2, 31 0, L_0x56078bc2f610; 1 drivers
v0x56078bc69c70_3 .net v0x56078bc69c70 3, 31 0, L_0x56078bc2d610; 1 drivers
v0x56078bc69c70_4 .net v0x56078bc69c70 4, 31 0, L_0x56078bc2b4e0; 1 drivers
v0x56078bc69c70_5 .net v0x56078bc69c70 5, 31 0, L_0x56078bc294f0; 1 drivers
v0x56078bc69c70_6 .net v0x56078bc69c70 6, 31 0, L_0x56078bc3cdd0; 1 drivers
v0x56078bc69c70_7 .net v0x56078bc69c70 7, 31 0, L_0x56078bc7e560; 1 drivers
L_0x56078bc6a800 .part v0x56078bc691f0_0, 0, 25;
L_0x56078bc6ad70 .part v0x56078bc691f0_0, 0, 25;
L_0x56078bc6b270 .part v0x56078bc691f0_0, 0, 25;
L_0x56078bc6b780 .part v0x56078bc691f0_0, 0, 25;
L_0x56078bc6bc40 .part v0x56078bc691f0_0, 0, 25;
L_0x56078bc6c140 .part v0x56078bc691f0_0, 0, 25;
L_0x56078bc6c630 .part v0x56078bc691f0_0, 0, 25;
L_0x56078bc6cb10 .part v0x56078bc691f0_0, 0, 25;
L_0x56078bc6ce60 .array/port v0x56078bc69680, L_0x56078bc6cf00;
L_0x56078bc6cf00 .concat [ 3 2 0 0], v0x56078bc69a10_0, L_0x7f691ac33258;
L_0x56078bc6d080 .concat [ 32 32 0 0], L_0x56078bc6ce60, L_0x7f691ac332a0;
L_0x56078bc7d1b0 .arith/div 64, L_0x7f691ac33450, L_0x56078bc6d080;
L_0x56078bc7d340 .part L_0x56078bc7d1b0, 0, 32;
L_0x56078bc7d480 .array/port v0x56078bc69bb0, L_0x56078bc7d5a0;
L_0x56078bc7d5a0 .concat [ 3 2 0 0], v0x56078bc69a10_0, L_0x7f691ac33330;
L_0x56078bc7d730 .array/port v0x56078bc69af0, L_0x56078bc7d860;
L_0x56078bc7d860 .concat [ 3 2 0 0], v0x56078bc69a10_0, L_0x7f691ac33378;
L_0x56078bc7d9a0 .array/port v0x56078bc69470, L_0x7f691ac33528;
L_0x56078bc7db10 .part L_0x56078bc7d9a0, 16, 16;
L_0x56078bc7dc30 .concat [ 16 16 0 0], L_0x56078bc7db10, L_0x7f691ac333c0;
L_0x56078bc7da40 .part v0x56078bc691f0_0, 6, 26;
L_0x56078bc7de50 .concat [ 26 6 0 0], L_0x56078bc7da40, L_0x7f691ac33408;
L_0x56078bc7e080 .part L_0x56078bc7ef90, 0, 16;
S_0x56078bc5e9d0 .scope begin, "$ivl_for_loop1" "$ivl_for_loop1" 4 13, 4 13 0, S_0x56078bc34260;
 .timescale 0 0;
v0x56078bc2b640_0 .var/2s "i", 31 0;
S_0x56078bc5ec10 .scope function.vec2.u32, "mix_voice" "mix_voice" 4 61, 4 61 0, S_0x56078bc34260;
 .timescale 0 0;
v0x56078bc29650_0 .var "index", 2 0;
; Variable mix_voice is bool return value of scope S_0x56078bc5ec10
TD_synthesizer_tb.synth.mix_voice ;
    %load/vec4 v0x56078bc66990_0;
    %pad/s 64;
    %load/vec4 v0x56078bc29650_0;
    %pad/u 5;
    %ix/vec4 4;
    %load/vec4a v0x56078bc69c70, 4;
    %pad/u 64;
    %cast2;
    %store/vec4 v0x56078bc5f390_0, 0, 64;
    %store/vec4 v0x56078bc5f290_0, 0, 64;
    %callf/vec4 TD_synthesizer_tb.synth.multiply, S_0x56078bc5f0b0;
    %ret/vec4 0, 0, 32;  Assign to mix_voice (store_vec4_to_lval)
    %disable S_0x56078bc5ec10;
    %end;
S_0x56078bc5ee90 .scope task, "mix_voices" "mix_voices" 4 54, 4 54 0, S_0x56078bc34260;
 .timescale 0 0;
v0x56078bc3e700_0 .var "index", 2 0;
TD_synthesizer_tb.synth.mix_voices ;
    %load/vec4 v0x56078bc66990_0;
    %load/vec4 v0x56078bc3e700_0;
    %pad/u 5;
    %ix/vec4 3;
    %ix/load 4, 0, 0; Constant delay
    %assign/vec4/a/d v0x56078bc69bb0, 0, 4;
    %load/vec4 v0x56078bc66890_0;
    %load/vec4 v0x56078bc3e700_0;
    %pad/u 5;
    %ix/vec4 3;
    %ix/load 4, 0, 0; Constant delay
    %assign/vec4/a/d v0x56078bc69af0, 0, 4;
    %load/vec4 v0x56078bc3e700_0;
    %store/vec4 v0x56078bc29650_0, 0, 3;
    %callf/vec4 TD_synthesizer_tb.synth.mix_voice, S_0x56078bc5ec10;
    %assign/vec4 v0x56078bc69790_0, 0;
    %load/vec4 v0x56078bc3e700_0;
    %pad/u 32;
    %cmpi/e 0, 0, 32;
    %flag_mov 8, 4;
    %jmp/0 T_2.4, 8;
    %load/vec4 v0x56078bc69790_0;
    %jmp/1 T_2.5, 8;
T_2.4 ; End of true expr.
    %load/vec4 v0x56078bc69110_0;
    %load/vec4 v0x56078bc69790_0;
    %add;
    %jmp/0 T_2.5, 8;
 ; End of false expr.
    %blend;
T_2.5;
    %cast2;
    %assign/vec4 v0x56078bc69110_0, 0;
    %end;
S_0x56078bc5f0b0 .scope function.vec2.u32, "multiply" "multiply" 5 1, 5 1 0, S_0x56078bc34260;
 .timescale 0 0;
v0x56078bc5f290_0 .var/2s "a", 63 0;
v0x56078bc5f390_0 .var/2s "b", 63 0;
; Variable multiply is bool return value of scope S_0x56078bc5f0b0
TD_synthesizer_tb.synth.multiply ;
    %load/vec4 v0x56078bc5f290_0;
    %load/vec4 v0x56078bc5f390_0;
    %mul;
    %ix/load 4, 20, 0;
    %flag_set/imm 4, 0;
    %shiftr/s 4;
    %cast2;
    %pad/s 32;
    %ret/vec4 0, 0, 32;  Assign to multiply (store_vec4_to_lval)
    %disable S_0x56078bc5f0b0;
    %end;
S_0x56078bc5f530 .scope generate, "set_filters[0]" "set_filters[0]" 4 73, 4 73 0, S_0x56078bc34260;
 .timescale 0 0;
P_0x56078bc5f780 .param/l "i" 0 4 73, +C4<00>;
v0x56078bc5ffa0_0 .net *"_ivl_0", 31 0, L_0x56078bc6a930;  1 drivers
v0x56078bc60080_0 .net *"_ivl_1", 24 0, L_0x56078bc6a800;  1 drivers
L_0x7f691ac33018 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x56078bc60160_0 .net *"_ivl_3", 6 0, L_0x7f691ac33018;  1 drivers
L_0x56078bc6a930 .concat [ 7 25 0 0], L_0x7f691ac33018, L_0x56078bc6a800;
L_0x56078bc6aaa0 .cast/2 32, L_0x56078bc6a930;
S_0x56078bc5f860 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x56078bc5f530;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x56078bc3c780 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000000>;
P_0x56078bc3c7c0 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x56078bc5fb90_0 .var/s "accumulator", 31 0;
v0x56078bc5fc90_0 .net "clk", 0 0, v0x56078bc6a140_0;  alias, 1 drivers
v0x56078bc5fd50_0 .net/2s "in", 31 0, L_0x56078bc6aaa0;  1 drivers
v0x56078bc5fe40_0 .net/2s "out", 31 0, L_0x56078bc6a710;  alias, 1 drivers
E_0x56078bc1b410 .event posedge, v0x56078bc5fc90_0;
L_0x56078bc6a710 .cast/2 32, v0x56078bc5fb90_0;
S_0x56078bc60250 .scope generate, "set_filters[1]" "set_filters[1]" 4 73, 4 73 0, S_0x56078bc34260;
 .timescale 0 0;
P_0x56078bc60450 .param/l "i" 0 4 73, +C4<01>;
v0x56078bc60db0_0 .net *"_ivl_0", 31 0, L_0x56078bc6ae60;  1 drivers
v0x56078bc60e90_0 .net *"_ivl_1", 24 0, L_0x56078bc6ad70;  1 drivers
L_0x7f691ac33060 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x56078bc60f70_0 .net *"_ivl_3", 6 0, L_0x7f691ac33060;  1 drivers
L_0x56078bc6ae60 .concat [ 7 25 0 0], L_0x7f691ac33060, L_0x56078bc6ad70;
L_0x56078bc6afa0 .cast/2 32, L_0x56078bc6ae60;
S_0x56078bc60530 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x56078bc60250;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x56078bc43bb0 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000001>;
P_0x56078bc43bf0 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x56078bc60880_0 .net *"_ivl_1", 31 0, L_0x56078bc6ab90;  1 drivers
v0x56078bc60980_0 .var/s "accumulator", 32 0;
v0x56078bc60a60_0 .net "clk", 0 0, v0x56078bc6a140_0;  alias, 1 drivers
v0x56078bc60b60_0 .net/2s "in", 31 0, L_0x56078bc6afa0;  1 drivers
v0x56078bc60c00_0 .net/2s "out", 31 0, L_0x56078bc6ac30;  alias, 1 drivers
L_0x56078bc6ab90 .part v0x56078bc60980_0, 1, 32;
L_0x56078bc6ac30 .cast/2 32, L_0x56078bc6ab90;
S_0x56078bc61030 .scope generate, "set_filters[2]" "set_filters[2]" 4 73, 4 73 0, S_0x56078bc34260;
 .timescale 0 0;
P_0x56078bc61230 .param/l "i" 0 4 73, +C4<010>;
v0x56078bc61bd0_0 .net *"_ivl_0", 31 0, L_0x56078bc6b340;  1 drivers
v0x56078bc61cb0_0 .net *"_ivl_1", 24 0, L_0x56078bc6b270;  1 drivers
L_0x7f691ac330a8 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x56078bc61d90_0 .net *"_ivl_3", 6 0, L_0x7f691ac330a8;  1 drivers
L_0x56078bc6b340 .concat [ 7 25 0 0], L_0x7f691ac330a8, L_0x56078bc6b270;
L_0x56078bc6b4b0 .cast/2 32, L_0x56078bc6b340;
S_0x56078bc61310 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x56078bc61030;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x56078bc43ae0 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000010>;
P_0x56078bc43b20 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x56078bc61660_0 .net *"_ivl_1", 31 0, L_0x56078bc6b090;  1 drivers
v0x56078bc61760_0 .var/s "accumulator", 33 0;
v0x56078bc61840_0 .net "clk", 0 0, v0x56078bc6a140_0;  alias, 1 drivers
v0x56078bc61960_0 .net/2s "in", 31 0, L_0x56078bc6b4b0;  1 drivers
v0x56078bc61a20_0 .net/2s "out", 31 0, L_0x56078bc6b130;  alias, 1 drivers
L_0x56078bc6b090 .part v0x56078bc61760_0, 2, 32;
L_0x56078bc6b130 .cast/2 32, L_0x56078bc6b090;
S_0x56078bc61e50 .scope generate, "set_filters[3]" "set_filters[3]" 4 73, 4 73 0, S_0x56078bc34260;
 .timescale 0 0;
P_0x56078bc62050 .param/l "i" 0 4 73, +C4<011>;
v0x56078bc62970_0 .net *"_ivl_0", 31 0, L_0x56078bc6b850;  1 drivers
v0x56078bc62a50_0 .net *"_ivl_1", 24 0, L_0x56078bc6b780;  1 drivers
L_0x7f691ac330f0 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x56078bc62b30_0 .net *"_ivl_3", 6 0, L_0x7f691ac330f0;  1 drivers
L_0x56078bc6b850 .concat [ 7 25 0 0], L_0x7f691ac330f0, L_0x56078bc6b780;
L_0x56078bc6b970 .cast/2 32, L_0x56078bc6b850;
S_0x56078bc62130 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x56078bc61e50;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x56078bc438f0 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000011>;
P_0x56078bc43930 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x56078bc62450_0 .net *"_ivl_1", 31 0, L_0x56078bc6b5a0;  1 drivers
v0x56078bc62550_0 .var/s "accumulator", 34 0;
v0x56078bc62630_0 .net "clk", 0 0, v0x56078bc6a140_0;  alias, 1 drivers
v0x56078bc62700_0 .net/2s "in", 31 0, L_0x56078bc6b970;  1 drivers
v0x56078bc627c0_0 .net/2s "out", 31 0, L_0x56078bc6b640;  alias, 1 drivers
L_0x56078bc6b5a0 .part v0x56078bc62550_0, 3, 32;
L_0x56078bc6b640 .cast/2 32, L_0x56078bc6b5a0;
S_0x56078bc62bf0 .scope generate, "set_filters[4]" "set_filters[4]" 4 73, 4 73 0, S_0x56078bc34260;
 .timescale 0 0;
P_0x56078bc5f730 .param/l "i" 0 4 73, +C4<0100>;
v0x56078bc636a0_0 .net *"_ivl_0", 31 0, L_0x56078bc6bd30;  1 drivers
v0x56078bc63780_0 .net *"_ivl_1", 24 0, L_0x56078bc6bc40;  1 drivers
L_0x7f691ac33138 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x56078bc63860_0 .net *"_ivl_3", 6 0, L_0x7f691ac33138;  1 drivers
L_0x56078bc6bd30 .concat [ 7 25 0 0], L_0x7f691ac33138, L_0x56078bc6bc40;
L_0x56078bc6be70 .cast/2 32, L_0x56078bc6bd30;
S_0x56078bc62e80 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x56078bc62bf0;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x56078bc43c40 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000100>;
P_0x56078bc43c80 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x56078bc631d0_0 .net *"_ivl_1", 31 0, L_0x56078bc6ba60;  1 drivers
v0x56078bc632d0_0 .var/s "accumulator", 35 0;
v0x56078bc633b0_0 .net "clk", 0 0, v0x56078bc6a140_0;  alias, 1 drivers
v0x56078bc63480_0 .net/2s "in", 31 0, L_0x56078bc6be70;  1 drivers
v0x56078bc63540_0 .net/2s "out", 31 0, L_0x56078bc6bb00;  alias, 1 drivers
L_0x56078bc6ba60 .part v0x56078bc632d0_0, 4, 32;
L_0x56078bc6bb00 .cast/2 32, L_0x56078bc6ba60;
S_0x56078bc63920 .scope generate, "set_filters[5]" "set_filters[5]" 4 73, 4 73 0, S_0x56078bc34260;
 .timescale 0 0;
P_0x56078bc63b20 .param/l "i" 0 4 73, +C4<0101>;
v0x56078bc64590_0 .net *"_ivl_0", 31 0, L_0x56078bc6c220;  1 drivers
v0x56078bc64670_0 .net *"_ivl_1", 24 0, L_0x56078bc6c140;  1 drivers
L_0x7f691ac33180 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x56078bc64750_0 .net *"_ivl_3", 6 0, L_0x7f691ac33180;  1 drivers
L_0x56078bc6c220 .concat [ 7 25 0 0], L_0x7f691ac33180, L_0x56078bc6c140;
L_0x56078bc6c360 .cast/2 32, L_0x56078bc6c220;
S_0x56078bc63c00 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x56078bc63920;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x56078bc63de0 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000101>;
P_0x56078bc63e20 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x56078bc64070_0 .net *"_ivl_1", 31 0, L_0x56078bc6bf60;  1 drivers
v0x56078bc64170_0 .var/s "accumulator", 36 0;
v0x56078bc64250_0 .net "clk", 0 0, v0x56078bc6a140_0;  alias, 1 drivers
v0x56078bc64320_0 .net/2s "in", 31 0, L_0x56078bc6c360;  1 drivers
v0x56078bc643e0_0 .net/2s "out", 31 0, L_0x56078bc6c000;  alias, 1 drivers
L_0x56078bc6bf60 .part v0x56078bc64170_0, 5, 32;
L_0x56078bc6c000 .cast/2 32, L_0x56078bc6bf60;
S_0x56078bc64810 .scope generate, "set_filters[6]" "set_filters[6]" 4 73, 4 73 0, S_0x56078bc34260;
 .timescale 0 0;
P_0x56078bc64a10 .param/l "i" 0 4 73, +C4<0110>;
v0x56078bc653f0_0 .net *"_ivl_0", 31 0, L_0x56078bc6c6d0;  1 drivers
v0x56078bc654d0_0 .net *"_ivl_1", 24 0, L_0x56078bc6c630;  1 drivers
L_0x7f691ac331c8 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x56078bc655b0_0 .net *"_ivl_3", 6 0, L_0x7f691ac331c8;  1 drivers
L_0x56078bc6c6d0 .concat [ 7 25 0 0], L_0x7f691ac331c8, L_0x56078bc6c630;
L_0x56078bc6c840 .cast/2 32, L_0x56078bc6c6d0;
S_0x56078bc64af0 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x56078bc64810;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x56078bc63ec0 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000110>;
P_0x56078bc63f00 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x56078bc64ed0_0 .net *"_ivl_1", 31 0, L_0x56078bc6c450;  1 drivers
v0x56078bc64fd0_0 .var/s "accumulator", 37 0;
v0x56078bc650b0_0 .net "clk", 0 0, v0x56078bc6a140_0;  alias, 1 drivers
v0x56078bc65180_0 .net/2s "in", 31 0, L_0x56078bc6c840;  1 drivers
v0x56078bc65240_0 .net/2s "out", 31 0, L_0x56078bc6c4f0;  alias, 1 drivers
L_0x56078bc6c450 .part v0x56078bc64fd0_0, 6, 32;
L_0x56078bc6c4f0 .cast/2 32, L_0x56078bc6c450;
S_0x56078bc65670 .scope generate, "set_filters[7]" "set_filters[7]" 4 73, 4 73 0, S_0x56078bc34260;
 .timescale 0 0;
P_0x56078bc65870 .param/l "i" 0 4 73, +C4<0111>;
v0x56078bc66250_0 .net *"_ivl_0", 31 0, L_0x56078bc6cc00;  1 drivers
v0x56078bc66330_0 .net *"_ivl_1", 24 0, L_0x56078bc6cb10;  1 drivers
L_0x7f691ac33210 .functor BUFT 1, C4<0000000>, C4<0>, C4<0>, C4<0>;
v0x56078bc66410_0 .net *"_ivl_3", 6 0, L_0x7f691ac33210;  1 drivers
L_0x56078bc6cc00 .concat [ 7 25 0 0], L_0x7f691ac33210, L_0x56078bc6cb10;
L_0x56078bc6cd70 .cast/2 32, L_0x56078bc6cc00;
S_0x56078bc65950 .scope module, "filter0" "iirLowPassSinglePole" 4 74, 6 5 0, S_0x56078bc65670;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 32 "in";
    .port_info 2 /OUTPUT 32 "out";
P_0x56078bc64d20 .param/l "GAIN" 0 6 7, +C4<00000000000000000000000000000111>;
P_0x56078bc64d60 .param/l "WIDTH" 0 6 8, +C4<00000000000000000000000000100000>;
v0x56078bc65d30_0 .net *"_ivl_1", 31 0, L_0x56078bc6c930;  1 drivers
v0x56078bc65e30_0 .var/s "accumulator", 38 0;
v0x56078bc65f10_0 .net "clk", 0 0, v0x56078bc6a140_0;  alias, 1 drivers
v0x56078bc65fe0_0 .net/2s "in", 31 0, L_0x56078bc6cd70;  1 drivers
v0x56078bc660a0_0 .net/2s "out", 31 0, L_0x56078bc6c9d0;  alias, 1 drivers
L_0x56078bc6c930 .part v0x56078bc65e30_0, 7, 32;
L_0x56078bc6c9d0 .cast/2 32, L_0x56078bc6c930;
S_0x56078bc664d0 .scope task, "set_output" "set_output" 4 65, 4 65 0, S_0x56078bc34260;
 .timescale 0 0;
TD_synthesizer_tb.synth.set_output ;
    %load/vec4 v0x56078bc69110_0;
    %assign/vec4 v0x56078bc691f0_0, 0;
    %end;
S_0x56078bc666b0 .scope module, "square" "OscilatorWires" 4 26, 4 82 0, S_0x56078bc34260;
 .timescale 0 0;
v0x56078bc66890_0 .net/2s "counter", 31 0, v0x56078bc67760_0;  1 drivers
v0x56078bc66990_0 .net/2s "out", 31 0, v0x56078bc67850_0;  1 drivers
v0x56078bc66a70_0 .net "wave_length", 31 0, L_0x56078bc7d340;  1 drivers
S_0x56078bc66b60 .scope module, "square_oscilator" "Square" 4 29, 7 1 0, S_0x56078bc34260;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 1 "set";
    .port_info 2 /INPUT 32 "set_sample";
    .port_info 3 /INPUT 32 "set_counter";
    .port_info 4 /INPUT 32 "wave_length";
    .port_info 5 /OUTPUT 32 "counter";
    .port_info 6 /OUTPUT 32 "out";
v0x56078bc676a0_0 .net "clk", 0 0, v0x56078bc6a140_0;  alias, 1 drivers
v0x56078bc67760_0 .var/2s "counter", 31 0;
v0x56078bc67850_0 .var/2s "out", 31 0;
L_0x7f691ac332e8 .functor BUFT 1, C4<1>, C4<0>, C4<0>, C4<0>;
v0x56078bc67950_0 .net "set", 0 0, L_0x7f691ac332e8;  1 drivers
v0x56078bc679f0_0 .net "set_counter", 31 0, L_0x56078bc7d730;  1 drivers
v0x56078bc67b00_0 .net "set_sample", 31 0, L_0x56078bc7d480;  1 drivers
v0x56078bc67be0_0 .net "wave_length", 31 0, L_0x56078bc7d340;  alias, 1 drivers
S_0x56078bc66df0 .scope function.vec2.u32, "get_counter" "get_counter" 7 33, 7 33 0, S_0x56078bc66b60;
 .timescale 0 0;
; Variable get_counter is bool return value of scope S_0x56078bc66df0
TD_synthesizer_tb.synth.square_oscilator.get_counter ;
    %load/vec4 v0x56078bc67950_0;
    %flag_set/vec4 8;
    %jmp/0 T_5.6, 8;
    %load/vec4 v0x56078bc679f0_0;
    %jmp/1 T_5.7, 8;
T_5.6 ; End of true expr.
    %load/vec4 v0x56078bc67760_0;
    %jmp/0 T_5.7, 8;
 ; End of false expr.
    %blend;
T_5.7;
    %cast2;
    %ret/vec4 0, 0, 32;  Assign to get_counter (store_vec4_to_lval)
    %disable S_0x56078bc66df0;
    %end;
S_0x56078bc670f0 .scope function.vec2.u32, "get_sample" "get_sample" 7 29, 7 29 0, S_0x56078bc66b60;
 .timescale 0 0;
; Variable get_sample is bool return value of scope S_0x56078bc670f0
TD_synthesizer_tb.synth.square_oscilator.get_sample ;
    %load/vec4 v0x56078bc67950_0;
    %flag_set/vec4 8;
    %jmp/0 T_6.8, 8;
    %load/vec4 v0x56078bc67b00_0;
    %jmp/1 T_6.9, 8;
T_6.8 ; End of true expr.
    %load/vec4 v0x56078bc67850_0;
    %jmp/0 T_6.9, 8;
 ; End of false expr.
    %blend;
T_6.9;
    %cast2;
    %ret/vec4 0, 0, 32;  Assign to get_sample (store_vec4_to_lval)
    %disable S_0x56078bc670f0;
    %end;
S_0x56078bc673d0 .scope function.vec2.s1, "should_flip_state" "should_flip_state" 7 25, 7 25 0, S_0x56078bc66b60;
 .timescale 0 0;
; Variable should_flip_state is bool return value of scope S_0x56078bc673d0
TD_synthesizer_tb.synth.square_oscilator.should_flip_state ;
    %load/vec4 v0x56078bc67be0_0;
    %pushi/vec4 2, 0, 32;
    %div;
    %callf/vec4 TD_synthesizer_tb.synth.square_oscilator.get_counter, S_0x56078bc66df0;
    %cmp/u;
    %flag_get/vec4 4;
    %flag_get/vec4 5;
    %or;
    %cast2;
    %ret/vec4 0, 0, 1;  Assign to should_flip_state (store_vec4_to_lval)
    %disable S_0x56078bc673d0;
    %end;
S_0x56078bc69f60 .scope task, "test_single_voice" "test_single_voice" 3 29, 3 29 0, S_0x56078bc2c1d0;
 .timescale 0 0;
TD_synthesizer_tb.test_single_voice ;
    %pushi/vec4 57671680, 0, 32;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x56078bc6a200, 4, 0;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 115343360, 0, 32;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x56078bc6a200, 4, 0;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 57671680, 0, 32;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x56078bc6a200, 4, 0;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 115343360, 0, 32;
    %ix/load 4, 1, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x56078bc6a200, 4, 0;
    %pushi/vec4 0, 0, 32;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x56078bc6a500, 4, 0;
    %pushi/vec4 524288, 0, 32;
    %ix/load 4, 1, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x56078bc6a500, 4, 0;
    %pushi/vec4 57344, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 8192, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 524288, 0, 32;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x56078bc6a500, 4, 0;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 0, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 0, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 49152, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 0, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 0, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %pushi/vec4 16384, 0, 16;
    %store/vec4 v0x56078bc2d120_0, 0, 16;
    %fork TD_synthesizer_tb.run_and_assert, S_0x56078bc30260;
    %join;
    %end;
    .scope S_0x56078bc5f860;
T_9 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0x56078bc5fb90_0, 0, 32;
    %end;
    .thread T_9, $init;
    .scope S_0x56078bc5f860;
T_10 ;
    %wait E_0x56078bc1b410;
    %load/vec4 v0x56078bc5fb90_0;
    %load/vec4 v0x56078bc5fd50_0;
    %add;
    %load/vec4 v0x56078bc5fe40_0;
    %sub;
    %assign/vec4 v0x56078bc5fb90_0, 0;
    %jmp T_10;
    .thread T_10;
    .scope S_0x56078bc60530;
T_11 ;
    %pushi/vec4 0, 0, 33;
    %store/vec4 v0x56078bc60980_0, 0, 33;
    %end;
    .thread T_11, $init;
    .scope S_0x56078bc60530;
T_12 ;
    %wait E_0x56078bc1b410;
    %load/vec4 v0x56078bc60980_0;
    %load/vec4 v0x56078bc60b60_0;
    %pad/s 33;
    %add;
    %load/vec4 v0x56078bc60c00_0;
    %pad/s 33;
    %sub;
    %assign/vec4 v0x56078bc60980_0, 0;
    %jmp T_12;
    .thread T_12;
    .scope S_0x56078bc61310;
T_13 ;
    %pushi/vec4 0, 0, 34;
    %store/vec4 v0x56078bc61760_0, 0, 34;
    %end;
    .thread T_13, $init;
    .scope S_0x56078bc61310;
T_14 ;
    %wait E_0x56078bc1b410;
    %load/vec4 v0x56078bc61760_0;
    %load/vec4 v0x56078bc61960_0;
    %pad/s 34;
    %add;
    %load/vec4 v0x56078bc61a20_0;
    %pad/s 34;
    %sub;
    %assign/vec4 v0x56078bc61760_0, 0;
    %jmp T_14;
    .thread T_14;
    .scope S_0x56078bc62130;
T_15 ;
    %pushi/vec4 0, 0, 35;
    %store/vec4 v0x56078bc62550_0, 0, 35;
    %end;
    .thread T_15, $init;
    .scope S_0x56078bc62130;
T_16 ;
    %wait E_0x56078bc1b410;
    %load/vec4 v0x56078bc62550_0;
    %load/vec4 v0x56078bc62700_0;
    %pad/s 35;
    %add;
    %load/vec4 v0x56078bc627c0_0;
    %pad/s 35;
    %sub;
    %assign/vec4 v0x56078bc62550_0, 0;
    %jmp T_16;
    .thread T_16;
    .scope S_0x56078bc62e80;
T_17 ;
    %pushi/vec4 0, 0, 36;
    %store/vec4 v0x56078bc632d0_0, 0, 36;
    %end;
    .thread T_17, $init;
    .scope S_0x56078bc62e80;
T_18 ;
    %wait E_0x56078bc1b410;
    %load/vec4 v0x56078bc632d0_0;
    %load/vec4 v0x56078bc63480_0;
    %pad/s 36;
    %add;
    %load/vec4 v0x56078bc63540_0;
    %pad/s 36;
    %sub;
    %assign/vec4 v0x56078bc632d0_0, 0;
    %jmp T_18;
    .thread T_18;
    .scope S_0x56078bc63c00;
T_19 ;
    %pushi/vec4 0, 0, 37;
    %store/vec4 v0x56078bc64170_0, 0, 37;
    %end;
    .thread T_19, $init;
    .scope S_0x56078bc63c00;
T_20 ;
    %wait E_0x56078bc1b410;
    %load/vec4 v0x56078bc64170_0;
    %load/vec4 v0x56078bc64320_0;
    %pad/s 37;
    %add;
    %load/vec4 v0x56078bc643e0_0;
    %pad/s 37;
    %sub;
    %assign/vec4 v0x56078bc64170_0, 0;
    %jmp T_20;
    .thread T_20;
    .scope S_0x56078bc64af0;
T_21 ;
    %pushi/vec4 0, 0, 38;
    %store/vec4 v0x56078bc64fd0_0, 0, 38;
    %end;
    .thread T_21, $init;
    .scope S_0x56078bc64af0;
T_22 ;
    %wait E_0x56078bc1b410;
    %load/vec4 v0x56078bc64fd0_0;
    %load/vec4 v0x56078bc65180_0;
    %pad/s 38;
    %add;
    %load/vec4 v0x56078bc65240_0;
    %pad/s 38;
    %sub;
    %assign/vec4 v0x56078bc64fd0_0, 0;
    %jmp T_22;
    .thread T_22;
    .scope S_0x56078bc65950;
T_23 ;
    %pushi/vec4 0, 0, 39;
    %store/vec4 v0x56078bc65e30_0, 0, 39;
    %end;
    .thread T_23, $init;
    .scope S_0x56078bc65950;
T_24 ;
    %wait E_0x56078bc1b410;
    %load/vec4 v0x56078bc65e30_0;
    %load/vec4 v0x56078bc65fe0_0;
    %pad/s 39;
    %add;
    %load/vec4 v0x56078bc660a0_0;
    %pad/s 39;
    %sub;
    %assign/vec4 v0x56078bc65e30_0, 0;
    %jmp T_24;
    .thread T_24;
    .scope S_0x56078bc66b60;
T_25 ;
    %pushi/vec4 4293918720, 0, 32;
    %store/vec4 v0x56078bc67850_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0x56078bc67760_0, 0, 32;
    %end;
    .thread T_25;
    .scope S_0x56078bc66b60;
T_26 ;
    %wait E_0x56078bc1b410;
    %callf/vec4 TD_synthesizer_tb.synth.square_oscilator.should_flip_state, S_0x56078bc673d0;
    %flag_set/vec4 8;
    %jmp/0xz  T_26.0, 8;
    %callf/vec4 TD_synthesizer_tb.synth.square_oscilator.get_sample, S_0x56078bc670f0;
    %muli 4294967295, 0, 32;
    %cast2;
    %assign/vec4 v0x56078bc67850_0, 0;
    %pushi/vec4 1, 0, 32;
    %assign/vec4 v0x56078bc67760_0, 0;
    %jmp T_26.1;
T_26.0 ;
    %callf/vec4 TD_synthesizer_tb.synth.square_oscilator.get_sample, S_0x56078bc670f0;
    %assign/vec4 v0x56078bc67850_0, 0;
    %callf/vec4 TD_synthesizer_tb.synth.square_oscilator.get_counter, S_0x56078bc66df0;
    %addi 1, 0, 32;
    %cast2;
    %assign/vec4 v0x56078bc67760_0, 0;
T_26.1 ;
    %jmp T_26;
    .thread T_26;
    .scope S_0x56078bc34260;
T_27 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0x56078bc69790_0, 0, 32;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0x56078bc69950_0, 0, 1;
    %pushi/vec4 0, 0, 3;
    %store/vec4 v0x56078bc69a10_0, 0, 3;
    %end;
    .thread T_27, $init;
    .scope S_0x56078bc34260;
T_28 ;
    %fork t_3, S_0x56078bc5e9d0;
    %jmp t_2;
    .scope S_0x56078bc5e9d0;
t_3 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0x56078bc2b640_0, 0, 32;
T_28.0 ;
    %load/vec4 v0x56078bc2b640_0;
    %cmpi/s 7, 0, 32;
    %jmp/0xz T_28.1, 5;
    %pushi/vec4 4293918720, 0, 32;
    %ix/getv/s 4, v0x56078bc2b640_0;
    %store/vec4a v0x56078bc69bb0, 4, 0;
    %pushi/vec4 1, 0, 32;
    %ix/getv/s 4, v0x56078bc2b640_0;
    %store/vec4a v0x56078bc69af0, 4, 0;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0x56078bc2b640_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0x56078bc2b640_0, 0, 32;
    %jmp T_28.0;
T_28.1 ;
    %end;
    .scope S_0x56078bc34260;
t_2 %join;
    %end;
    .thread T_28;
    .scope S_0x56078bc34260;
T_29 ;
    %wait E_0x56078bc1b410;
    %load/vec4 v0x56078bc69950_0;
    %pad/u 2;
    %addi 1, 0, 2;
    %pad/u 1;
    %assign/vec4 v0x56078bc69950_0, 0;
    %load/vec4 v0x56078bc69950_0;
    %pad/u 32;
    %cmpi/e 1, 0, 32;
    %jmp/0xz  T_29.0, 4;
    %load/vec4 v0x56078bc69a10_0;
    %store/vec4 v0x56078bc3e700_0, 0, 3;
    %fork TD_synthesizer_tb.synth.mix_voices, S_0x56078bc5ee90;
    %join;
    %load/vec4 v0x56078bc69a10_0;
    %addi 1, 0, 3;
    %assign/vec4 v0x56078bc69a10_0, 0;
    %load/vec4 v0x56078bc69a10_0;
    %pad/u 32;
    %cmpi/e 7, 0, 32;
    %jmp/0xz  T_29.2, 4;
    %fork TD_synthesizer_tb.synth.set_output, S_0x56078bc664d0;
    %join;
T_29.2 ;
T_29.0 ;
    %jmp T_29;
    .thread T_29;
    .scope S_0x56078bc2c1d0;
T_30 ;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0x56078bc6a140_0, 0, 1;
    %end;
    .thread T_30, $init;
    .scope S_0x56078bc2c1d0;
T_31 ;
    %fork t_5, S_0x56078bc2e260;
    %jmp t_4;
    .scope S_0x56078bc2e260;
t_5 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0x56078bc31120_0, 0, 32;
T_31.0 ;
    %load/vec4 v0x56078bc31120_0;
    %cmpi/s 7, 0, 32;
    %flag_or 5, 4;
    %jmp/0xz T_31.1, 5;
    %pushi/vec4 0, 0, 32;
    %ix/getv/s 4, v0x56078bc31120_0;
    %store/vec4a v0x56078bc6a500, 4, 0;
    %pushi/vec4 57671680, 0, 32;
    %ix/getv/s 4, v0x56078bc31120_0;
    %store/vec4a v0x56078bc6a200, 4, 0;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0x56078bc31120_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0x56078bc31120_0, 0, 32;
    %jmp T_31.0;
T_31.1 ;
    %end;
    .scope S_0x56078bc2c1d0;
t_4 %join;
    %pushi/vec4 1048576, 0, 32;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v0x56078bc6a500, 4, 0;
    %fork TD_synthesizer_tb.test_single_voice, S_0x56078bc69f60;
    %join;
    %end;
    .thread T_31;
# The file index is used to find the file name in the following table.
:file_names 8;
    "N/A";
    "<interactive>";
    "-";
    "synthesizer_tb.sv";
    ".//Synthesizer.sv";
    "./multiply.sv";
    ".//iirLowPassSinglePole.sv";
    ".//Square.sv";
